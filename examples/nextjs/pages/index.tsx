import {
  LiveKitRoom,
  ConnectionState,
  useToken,
  RoomName,
  RoomAudioRenderer,
  useScreenShare,
  GridView,
  FocusViewContainer,
  ParticipantClickEvent,
  DeviceMenu,
  DisconnectButton,
  MediaControlButton,
  TrackSource,
} from '@livekit/components-react';
import { Participant, Room, setLogLevel, Track, TrackPublication } from 'livekit-client';

import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useMemo, useState } from 'react';
import styles from '../styles/Home.module.css';

const Home: NextPage = () => {
  const params = typeof window !== 'undefined' ? new URLSearchParams(location.search) : null;

  const roomName = params?.get('room') ?? 'test-room';
  const userIdentity = params?.get('user') ?? 'test-user';
  const [connect, setConnect] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [focusedParticipant, setFocusedParticipant] = useState<Participant | undefined>(undefined);
  const [focusPublication, setFocusPublication] = useState<TrackPublication | undefined>(undefined);
  const [isFocusMode, setIsFocusMode] = useState(false);

  const room = useMemo(() => new Room(), []);
  setLogLevel('debug');

  const { screenShareTrack, screenShareParticipant } = useScreenShare({ room });

  const updateFocusParticipant = ({ participant, publication }: ParticipantClickEvent) => {
    setFocusPublication(publication);
    setFocusedParticipant(participant);
    setIsFocusMode(true);
  };

  useEffect(() => {
    if (
      (!screenShareTrack &&
        focusPublication &&
        focusPublication.source !== Track.Source.ScreenShare) ||
      (screenShareTrack && focusPublication === screenShareTrack)
    ) {
      return;
    }
    setFocusPublication(screenShareTrack);
    setFocusedParticipant(screenShareParticipant);
    setIsFocusMode(screenShareTrack !== undefined);
    // TODO fix screen share
    console.log('screen share change', screenShareTrack, { isFocusMode });
  }, [screenShareTrack, screenShareParticipant, focusPublication]);

  const token = useToken(roomName, userIdentity, 'myname');

  const handleDisconnect = () => {
    setConnect(false);
    setIsConnected(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>LiveKit Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://livekit.io">LiveKit</a>
        </h1>
        {/* <p>Status: {roomState.connectionState} <br/> Nr. of participants: {roomState.participants.length} </p> */}
        {!isConnected && (
          <button onClick={() => setConnect(!connect)}>{connect ? 'Disconnect' : 'Connect'}</button>
        )}

        {/* <Room connect={connect} /> */}
        <LiveKitRoom
          token={token}
          room={room}
          serverUrl={process.env.NEXT_PUBLIC_LK_SERVER_URL}
          connect={connect}
          onConnected={() => setIsConnected(true)}
          onDisconnected={handleDisconnect}
          audio={true}
          video={true}
        >
          <RoomName />
          <ConnectionState />
          <RoomAudioRenderer />
          {isConnected && (
            <>
              <button onClick={() => setIsFocusMode(!isFocusMode)}>
                {isFocusMode ? 'grid' : 'focus view'}
              </button>
              {isFocusMode ? (
                <FocusViewContainer
                  showPiP={true}
                  focusParticipant={focusedParticipant}
                  onParticipantClick={updateFocusParticipant}
                  focusTrackSource={focusPublication?.source}
                />
              ) : (
                <GridView onParticipantClick={updateFocusParticipant} />
              )}
              <div className={styles.localUser}>
                <div className={styles.controlBar}>
                  <MediaControlButton source={TrackSource.Camera}></MediaControlButton>
                  <DeviceMenu kind="videoinput"></DeviceMenu>
                  <MediaControlButton source={TrackSource.Microphone}></MediaControlButton>
                  <DeviceMenu kind="audioinput"></DeviceMenu>
                  <MediaControlButton source={TrackSource.ScreenShare}></MediaControlButton>
                  <DisconnectButton>Hang up!</DisconnectButton>
                </div>
              </div>
            </>
          )}
        </LiveKitRoom>
      </main>
    </div>
  );
};

export default Home;
