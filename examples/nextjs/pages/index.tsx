import {
  ParticipantView,
  ConnectionIndicator,
  LiveKitRoom,
  MediaControlButton,
  TrackSource,
  Participants,
  ConnectionStatus,
  DisconnectButton,
  useToken,
  ScreenShareView,
  ParticipantName,
  MediaMutedIndicator,
  RoomName,
  RoomAudioRenderer,
  VideoTrack,
  isLocal,
  isRemote,
  DeviceMenu,
} from '@livekit/components-react';
import { LocalParticipant, RemoteParticipant, Track } from 'livekit-client';

import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';

// import '@livekit/components/dist/livekit-components.mjs';

const Home: NextPage = () => {
  const params = typeof window !== 'undefined' ? new URLSearchParams(location.search) : null;

  const roomName = params?.get('room') ?? 'test-room';
  const userIdentity = params?.get('user') ?? 'test-user';
  const [connect, setConnect] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [isScreenShareActive, setIsScreenShareActive] = useState(false);

  useEffect(() => {
    console.log('screenshare active', { isScreenShareActive });
  }, [isScreenShareActive]);

  const token = useToken(roomName, userIdentity, 'myname');

  const handleDisconnect = () => {
    setConnect(false);
    setIsConnected(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>LiveKit Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://livekit.io">LiveKit</a>
        </h1>
        {/* <p>Status: {roomState.connectionState} <br/> Nr. of participants: {roomState.participants.length} </p> */}
        {!isConnected && (
          <button onClick={() => setConnect(!connect)}>{connect ? 'Disconnect' : 'Connect'}</button>
        )}
        {/* <Room connect={connect} /> */}
        <LiveKitRoom
          token={token}
          serverUrl={process.env.NEXT_PUBLIC_LK_SERVER_URL}
          connect={connect}
          onConnected={() => setIsConnected(true)}
          onDisconnected={handleDisconnect}
          audio={true}
          video={true}
        >
          <RoomName />
          <ConnectionStatus />
          <RoomAudioRenderer />
          {/* <MediaSelection type="microphone"/>  */}
          {isConnected && (
            <>
              <div className={isScreenShareActive ? styles.focusView : styles.gridView}>
                <div className={styles.screenShare}>
                  <ScreenShareView
                    onScreenShareChange={(active) => setIsScreenShareActive(active)}
                  />
                </div>
                <div className={styles.participantGrid}>
                  <Participants filter={(participants) => participants.filter(isRemote)}>
                    <ParticipantView>
                      <VideoTrack source={Track.Source.Camera}></VideoTrack>

                      <div className={styles.participantIndicators}>
                        <div style={{ display: 'flex' }}>
                          <MediaMutedIndicator kind="audio"></MediaMutedIndicator>
                          <MediaMutedIndicator kind="video"></MediaMutedIndicator>
                        </div>
                        <ParticipantName />
                        <ConnectionIndicator />
                      </div>
                    </ParticipantView>
                  </Participants>
                </div>
                <div className={styles.localUser}>
                  <Participants filter={(participants) => participants.filter(isLocal)}>
                    <ParticipantView>
                      <VideoTrack source={Track.Source.Camera}></VideoTrack>

                      <div className={styles.participantIndicators}>
                        <div style={{ display: 'flex' }}>
                          <MediaMutedIndicator kind="audio"></MediaMutedIndicator>
                          <MediaMutedIndicator kind="video"></MediaMutedIndicator>
                        </div>
                        <ParticipantName>(You)</ParticipantName>
                        <ConnectionIndicator />
                      </div>
                    </ParticipantView>
                  </Participants>
                  <div className={styles.controlBar}>
                    <MediaControlButton source={TrackSource.Camera}></MediaControlButton>
                    <DeviceMenu kind="videoinput"></DeviceMenu>
                    <MediaControlButton source={TrackSource.Microphone}></MediaControlButton>
                    <DeviceMenu kind="audioinput"></DeviceMenu>
                    <MediaControlButton source={TrackSource.ScreenShare}></MediaControlButton>
                    <DisconnectButton>Hang up!</DisconnectButton>
                  </div>
                </div>
              </div>
            </>
          )}
        </LiveKitRoom>
      </main>
    </div>
  );
};

export default Home;
