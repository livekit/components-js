import {
  ParticipantView,
  ConnectionQualityIndicator,
  LiveKitRoom,
  MediaControlButton,
  TrackSource,
  Participants,
  ConnectionState,
  DisconnectButton,
  useToken,
  ParticipantName,
  MediaMutedIndicator,
  RoomName,
  RoomAudioRenderer,
  MediaTrack,
  useScreenShare,
  DeviceSelectButton,
} from '@livekit/components-react';
import { Participant, Room, Track, TrackPublication } from 'livekit-client';

import type { NextPage } from 'next';
import Head from 'next/head';
import * as React from 'react';
import styles from '../styles/OldIndex.module.css';

const Home: NextPage = () => {
  const params = typeof window !== 'undefined' ? new URLSearchParams(location.search) : null;

  const roomName = params?.get('room') ?? 'test-room';
  const userIdentity = params?.get('user') ?? 'test-user';
  const [connect, setConnect] = React.useState(false);
  const [isConnected, setIsConnected] = React.useState(false);
  const [focusedParticipant, setFocusedParticipant] = React.useState<Participant | undefined>(
    undefined,
  );
  const [focusPublication, setFocusPublication] = React.useState<TrackPublication | undefined>(
    undefined,
  );

  const room = React.useMemo(() => new Room(), []);

  const { screenShareTrack, screenShareParticipant } = useScreenShare({ room });

  React.useEffect(() => {
    if (
      (!screenShareTrack &&
        focusPublication &&
        focusPublication.source !== Track.Source.ScreenShare) ||
      (screenShareTrack && focusPublication === screenShareTrack)
    ) {
      return;
    }
    setFocusPublication(screenShareTrack);
    setFocusedParticipant(screenShareParticipant);
  }, [screenShareTrack, screenShareParticipant, focusPublication]);

  const token = useToken(process.env.NEXT_PUBLIC_LK_TOKEN_ENDPOINT, roomName, {
    identity: userIdentity,
    name: 'myname',
  });
  const handleDisconnect = () => {
    setConnect(false);
    setIsConnected(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>LiveKit Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://livekit.io">LiveKit</a>
        </h1>
        {/* <p>Status: {roomState.connectionState} <br/> Nr. of participants: {roomState.participants.length} </p> */}
        {!isConnected && (
          <button onClick={() => setConnect(!connect)}>{connect ? 'Disconnect' : 'Connect'}</button>
        )}
        {/* <Room connect={connect} /> */}
        <LiveKitRoom
          token={token}
          room={room}
          serverUrl={process.env.NEXT_PUBLIC_LK_SERVER_URL}
          connect={connect}
          onConnected={() => setIsConnected(true)}
          onDisconnected={handleDisconnect}
          audio={true}
          video={true}
        >
          <RoomName />
          <ConnectionState />
          <RoomAudioRenderer />
          {isConnected && (
            <>
              <div className={focusPublication ? styles.focusView : styles.gridView}>
                <div className={styles.screenShare}>
                  {focusPublication && focusedParticipant && (
                    <>
                      <MediaTrack
                        participant={focusedParticipant}
                        source={focusPublication.source}
                      />
                      <button
                        style={{ position: 'absolute', top: '20px', left: '20px' }}
                        onClick={() => {
                          setFocusPublication(undefined);
                          setFocusedParticipant(undefined);
                        }}
                      >
                        reset focus
                      </button>
                    </>
                  )}
                </div>
                <div className={styles.participantGrid}>
                  <Participants
                    filter={(participants) => participants.filter((p) => !p.isLocal)}
                    filterDependencies={[focusedParticipant]}
                  >
                    <ParticipantView className={styles.participantView}>
                      <MediaTrack
                        source={Track.Source.Camera}
                        onTrackClick={(evt) => {
                          setFocusPublication(evt.publication);
                          setFocusedParticipant(evt.participant);
                        }}
                      ></MediaTrack>

                      <div className={styles.participantIndicators}>
                        <div style={{ display: 'flex' }}>
                          <MediaMutedIndicator
                            source={Track.Source.Microphone}
                          ></MediaMutedIndicator>
                          <MediaMutedIndicator source={Track.Source.Camera}></MediaMutedIndicator>
                        </div>
                        <ParticipantName />
                        <ConnectionQualityIndicator />
                      </div>
                    </ParticipantView>
                  </Participants>
                </div>
                <div className={styles.localUser}>
                  <Participants filter={(participants) => participants.filter((p) => p.isLocal)}>
                    <ParticipantView>
                      <MediaTrack source={Track.Source.Camera}></MediaTrack>
                      <div className={styles.participantIndicators}>
                        <div style={{ display: 'flex' }}>
                          <MediaMutedIndicator
                            source={Track.Source.Microphone}
                          ></MediaMutedIndicator>
                          <MediaMutedIndicator source={Track.Source.Camera}></MediaMutedIndicator>
                        </div>
                        <ParticipantName>(You)</ParticipantName>
                        <ConnectionQualityIndicator />
                      </div>
                    </ParticipantView>
                  </Participants>
                  <div className={styles.controlBar}>
                    <MediaControlButton source={TrackSource.Camera}></MediaControlButton>
                    <DeviceSelectButton kind="videoinput"></DeviceSelectButton>
                    <MediaControlButton source={TrackSource.Microphone}></MediaControlButton>
                    <DeviceSelectButton kind="audioinput"></DeviceSelectButton>
                    <MediaControlButton source={TrackSource.ScreenShare}></MediaControlButton>
                    <DisconnectButton>Hang up!</DisconnectButton>
                  </div>
                </div>
              </div>
            </>
          )}
        </LiveKitRoom>
      </main>
    </div>
  );
};

export default Home;
