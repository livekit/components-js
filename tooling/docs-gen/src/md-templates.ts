import { ComponentDoc, PropItem } from 'react-docgen-typescript';

const splitCamelCase = (camelCaseStr: string) =>
  camelCaseStr.replace(/([a-z0-9])([A-Z])/g, '$1 $2');

function addTitle(def: ComponentDoc, isHook: boolean = false): string {
  if (isHook) {
    return `# ${def.displayName} Hook\n`;
  } else {
    return `# ${def.displayName}\n`;
  }
}

function addDescription(def: ComponentDoc): string {
  const description = def.description.replaceAll('\n', ' ');
  return description ? `${description}\n` : '';
}

function addUsage(def: ComponentDoc): string {
  return def.tags?.example
    ? `## Usage

${def.tags?.example}

<!--USAGE_INSERT_MARKER-->

`
    : `## Usage

<!--USAGE_INSERT_MARKER->

`;
}

function addProps(props: ComponentDoc['props']): string {
  if (Object.values(props).length === 0) {
    return '';
  }
  return `## Props
${generateMarkdownPropsTable(props)}
`;
}

function generateMarkdownPropsTable(props: ComponentDoc['props']): string {
  function renderRow(item: PropItem) {
    const name = `${item.name}`;
    const type = `\`${item.type.name.replaceAll('|', '\\|')}\``;
    const defaultValue =
      typeof item.defaultValue && item.defaultValue === 'object'
        ? ` \`${JSON.stringify(item.defaultValue)}\``
        : '';
    const description = `${item.description.replaceAll('\n', ' ').replaceAll('|', '\\|')}`;

    const row = `| ${name} | ${type} | ${defaultValue} | ${description} |`;
    return row;
  }
  return `
| Name | Type | Default | Description |
| --- | --- | --- | --- |
${Object.values(props)
  .map((propItem) => renderRow(propItem))
  .join('\n')}
`;
}

const autogeneratedFileWarning = `<!--
!!!! Autogenerated File !!!!
This file was created by @livekit/components-docs-gen and should not be changed manually.
The contents of this file can be replaced at any time which would lead to the loss of all manual changes.
-->
`;

export function mdComponentTemplate(def: ComponentDoc): string {
  return [
    autogeneratedFileWarning,
    addTitle(def),
    addDescription(def),
    addUsage(def),
    addProps(def.props),
  ]
    .filter((str) => str !== '')
    .join('\n');
}

export function mdHookTemplate(def: ComponentDoc): string {
  return [
    autogeneratedFileWarning,
    addTitle(def),
    addDescription(def),
    addUsage(def),
    addProps(def.props),
  ]
    .filter((str) => str !== '')
    .join('\n');
}
